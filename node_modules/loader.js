var Loader = (function() {
	'use strict';

	var fs = require('fs');
	var Coordinate = require('coordinate');
	var Ride = require('ride');

	var Loader = {

		/**
		 * Return a list of rides per user and per day from the given filepath
		 * 
		 * @param filepath
		 * @returns {Array}
		 */
		loadData: function(filepath) {
			var ridesPerUser = {};
			
			fs.readdir(filepath, function(err, files) {
				
				/*
				 * Build a list of ride per user and day (each file)
				 */ 
				files.forEach(function(filename) {
					if (filename.split('.').pop() != 'json') {
						return;
					}
					
					// Parse JSON file to build an array of rides per user
					var ridesListPerUser = Loader.loadFile(filepath + '/' + filename);
					
					/*
					 * For each user we list his rides per day
					 */
					ridesListPerUser.forEach(function(user) {
						var userId = user['userId'];
						if(!(userId in ridesPerUser)) {
							ridesPerUser[userId] = [];
						}
						
						var date = filename.substring(0, 10);
						ridesPerUser[userId][date] = user['data'];
					});
				});
				
				console.log('All data are loaded!');
			});
			
			return ridesPerUser;
		},
		
		loadFile: function(filename) {
			console.log('Reading ' + filename + '...');
			var data = fs.readFileSync(filename, {encoding: 'utf-8'});

			console.log('Parsing JSON data...');
		    var ridesListPerUser = this.parseJSONTraces(data);
		    
		    return ridesListPerUser;
		},
		
		/**
		 * Return a list of users with for each user a list of mobility traces.
		 * 
		 * @param data
		 * @returns {Array}
		 */
		parseJSONTraces: function(data) {
			var tracesListPerUser = [];
		    try {
		    	// JSON processing
			    JSON.parse(data).forEach(function(user) {

			    	var userTraces = {'userId': user['header']['userId'], 'data': user['data']};
			    	userTraces['data'].forEach(function(trace, index) {
						
			    		// replace traces by Coordinate objects
						userTraces['data'][index] = new Coordinate(
								trace['timestamp'],
								trace['lat'],
								trace['lon'],
								trace['accuracy']);
					});
			    	
			    	/*
			    	 * Split rides based on delay of inactivity
			    	 */
			    	console.log('Spliting data into Rides set...');
				    var timeWindow = 5; // 5 min
				    userTraces['data'] = Loader.splitIntoRides(userTraces['data'], timeWindow);
				    
				    tracesListPerUser.push(userTraces);
				});

			} catch(e) {
			    console.error('Parsing error:', e); 
			}

			return tracesListPerUser;
		},
		
		/**
		 * Split the data set into logical set of coordinate which composed a ride.
		 * This analyze is based over the delay between two coordinate
		 * 
		 * @param data
		 * @param timeWindow
		 */
		splitIntoRides: function(data, timeWindow) {
			var rides = [];
			rides.push(new Ride());
			for (var i = 1; i < data.length; i++) {
				var t_1 = data[i - 1];	// t-1
				var t = data[i];		// t

				var delta = ((t.timestamp - t_1.timestamp) / 60000).toFixed(2);
				
				/*
				 * Checking if the current position is in 
				 * the current ride or if it's a new ride
				 */
				if (delta > timeWindow) {
					// to overwrite empty rides (less than two points)
					if (rides[rides.length - 1].getLength() > 2) {
						rides.push(new Ride());
					}
				}
				
				// add new coordinate
				rides[rides.length - 1].addCoordinate(t);
			}
			
			return rides;
		}
	};

	return Loader;

}());

module.exports = Loader;