/**
 * This class represent a "ride", which is a sequence of coordinate
 */
var Ride = (function() {
	'use strict';
	
	Ride.RIDE_TYPE = {
		CAR: "Car",
		PUBLIC_TRANS: "Public transport",
		WALK: "Walk",
		UNDEFINED: "Undefined"
	};

	function Ride() {
		this.coordinatesList = [];
		this.rideType;
	}

	Ride.prototype.addCoordinate = function(coordinate) {
		this.coordinatesList.push(coordinate);
	};
	
	Ride.prototype.setType = function(rideType) {
		this.rideType = rideType;
	};

	Ride.prototype.getType = function() {
		return this.rideType;
	};
	
	Ride.prototype.getLength = function() {
		return this.coordinatesList.length;
	};
	
	Ride.prototype.getCoordinates = function() {
		return this.coordinatesList;
	};
	
	/**
	 * Return the max speed of the ride
	 * 
	 * @returns {Number}
	 */
	Ride.prototype.computeMaxSpeed = function() {
		var maxSpeed = 0;
		
		for (var i = 1; i < this.coordinatesList.length; i++) {
			var t_1 = this.coordinatesList[i - 1];
			var t = this.coordinatesList[i];

			// aggregate speeds
			var speed = t_1.speed(t);
			if (speed > maxSpeed) {
				maxSpeed = speed;
			}
		}
		
		return maxSpeed;
	};
	
	/**
	 * Return the average speed of the ride.
	 * 
	 * @returns {Number}
	 */
	Ride.prototype.computeAverageSpeed = function() {
		var speedSum = 0;
		
		for (var i = 1; i < this.coordinatesList.length; i++) {
			var t_1 = this.coordinatesList[i - 1];
			var t = this.coordinatesList[i];

			// aggregate speeds
			speedSum += t_1.speed(t);
		}
		
		return (speedSum / (this.coordinatesList.length - 1));
	};
	
	/**
	 * Return the total distance of the ride.
	 * 
	 * @returns {Number}
	 */
	Ride.prototype.computeTotalDistance = function() {
		var distanceSum = 0;
		
		for (var i = 1; i < this.coordinatesList.length; i++) {
			var t_1 = this.coordinatesList[i - 1];
			var t = this.coordinatesList[i];

			// aggregate distances
			distanceSum += t_1.distance(t);
		}
		
		return distanceSum;
	};

	return Ride;

}());

module.exports = Ride;