/**
 * This class represent a "ride", which is a sequence of coordinate
 */
var Ride = (function() {
	'use strict';
	
	Ride.RIDE_TYPE = {
		CAR: "car",
		PUBLIC_TRANS: "public transport",
		WALK: "walking",
		UNDEFINED: "undefined"
	};
	
	Ride.EMISSION_FACTOR = {
	    "car"      : 255.97,
	    "motorbike": 144.69,
	    "plane"    : 388.51,
	    "train"    : 37.49,
	    "coach"    : 39.97,
	    "bus"      : 88.37,
	    "bike"     : 0.,
	    "walking"  : 0.,
	    'undefined': 0.
	};

	function Ride() {
		this.coordinatesList = [];
	}

	Ride.prototype.addCoordinate = function(coordinate) {
		this.coordinatesList.push(coordinate);
	};
	
	Ride.prototype.getLength = function() {
		return this.coordinatesList.length;
	};
	
	Ride.prototype.getCoordinates = function() {
		return this.coordinatesList;
	};
	
	/**
	 * Set the following attributes :
	 *  - averageSpeed	: Average speed in km/h
	 *  - averageAcc 	: Average acceleration in m/s^2
	 *  - distance		: Total distance in km
	 *  - maxSpeed		: Max speed in km/h
	 *  - type			: Type of vehicle used
	 *  - emission		: Carbon footprint in kg eq. CO2
	 */
	Ride.prototype.computeMetrics = function() {
		var maxSpeed = 0.;
		var speedSum = 0.;
		var accSum = 0.;
		var distSum = 0.;
		
		for (var i = 1; i < this.coordinatesList.length; i++) {
			var t_1 = this.coordinatesList[i - 1];
			var t = this.coordinatesList[i];

			var speed = t_1.speed(t);
			
			// aggregate speeds
			speedSum += speed;
			
			// max speed
			if (speed > maxSpeed) {
				maxSpeed = speed;
			}
			
			// aggregate accelerations
			accSum += t_1.acceleration(t);
			
			// aggregate distances
			distSum += t_1.distance(t);
		}
		
		/*
		 * Set attributes
		 */
		this.distance = distSum;
		this.averageSpeed = speedSum / (this.coordinatesList.length - 1);
		this.averageAcc = accSum / (this.coordinatesList.length - 1);
		
		/*
		 * We obviously lost a lot of car movement
		 * but that's just a draft
		 */ 
		if(this.averageSpeed > 30 || this.maxSpeed > 60 || this.averageAcc > 0.04) {
			this.type = Ride.RIDE_TYPE.CAR;
		}
		else if(this.averageSpeed <= 5 && this.maxSpeed < 8) {
			this.type = Ride.RIDE_TYPE.WALK;
		}
		else {
			this.type = Ride.RIDE_TYPE.UNDEFINED;
		}
		
		var nPassengers = 1; //XXX FIXED FOR NOW
		this.emission = (this.distance * Ride.EMISSION_FACTOR[this.type] / nPassengers) / 1000;
		
	};
	
	/**
	 * Set the following attributes :
	 *  - averageSpeed	: Average speed in km/h
	 *  - averageAcc 	: Average acceleration in m/s^2
	 *  - distance		: Total distance in km
	 *  - maxSpeed		: Max speed in km/h
	 *  - type			: Type of vehicle used
	 *  - emission		: Carbon footprint in kg eq. CO2
	 */
	Ride.prototype.computeMetrics = function() {
		var maxSpeed = 0.;
		var speedSum = 0.;
		var accSum = 0.;
		var distSum = 0.;
		
		for (var i = 1; i < this.coordinatesList.length; i++) {
			var t_1 = this.coordinatesList[i - 1];
			var t = this.coordinatesList[i];

			var speed = t_1.speed(t);
			
			// aggregate speeds
			speedSum += speed;
			
			// max speed
			if (speed > maxSpeed) {
				maxSpeed = speed;
			}
			
			// aggregate accelerations
			accSum += t_1.acceleration(t);
			
			// aggregate distances
			distSum += t_1.distance(t);
		}
		
		/*
		 * Set attributes
		 */
		this.distance = distSum;
		this.averageSpeed = speedSum / (this.coordinatesList.length - 1);
		this.averageAcc = accSum / (this.coordinatesList.length - 1);
		
		/*
		 * We obviously lost a lot of car movement
		 * but that's just a draft
		 */ 
		if(this.averageSpeed > 30 || this.maxSpeed > 60 || this.averageAcc > 0.04) {
			this.type = Ride.RIDE_TYPE.CAR;
		}
		else if(this.averageSpeed <= 5 && this.maxSpeed < 8) {
			this.type = Ride.RIDE_TYPE.WALK;
		}
		else {
			this.type = Ride.RIDE_TYPE.UNDEFINED;
		}
		
		var nPassengers = 1; //XXX FIXED FOR NOW
		this.emission = (this.distance * Ride.EMISSION_FACTOR[this.type] / nPassengers) / 1000;
		
	};
	
	/**
	 * Return the max speed of the ride (km/h).
	 * 
	 * @returns {Number}
	 */
	Ride.prototype.computeMaxSpeed = function() {
		var maxSpeed = 0.;
		
		for (var i = 1; i < this.coordinatesList.length; i++) {
			var t_1 = this.coordinatesList[i - 1];
			var t = this.coordinatesList[i];

			// aggregate speeds
			var speed = t_1.speed(t);
			if (speed > maxSpeed) {
				maxSpeed = speed;
			}
		}
		
		return maxSpeed;
	};
	
	/**
	 * Return the average speed of the ride (km/h).
	 * 
	 * @returns {Number}
	 */
	Ride.prototype.computeAverageSpeed = function() {
		var speedSum = 0.;
		
		for (var i = 1; i < this.coordinatesList.length; i++) {
			var t_1 = this.coordinatesList[i - 1];
			var t = this.coordinatesList[i];

			// aggregate speeds
			speedSum += t_1.speed(t);
		}
		
		return (speedSum / (this.coordinatesList.length - 1));
	};
	
	/**
	 * Return the total distance of the ride (km).
	 * 
	 * @returns {Number}
	 */
	Ride.prototype.computeTotalDistance = function() {
		var distanceSum = 0.;
		
		for (var i = 1; i < this.coordinatesList.length; i++) {
			var t_1 = this.coordinatesList[i - 1];
			var t = this.coordinatesList[i];

			// aggregate distances
			distanceSum += t_1.distance(t);
		}
		
		return distanceSum;
	};
	
	/**
	 * Return the average acceleration of the ride (m/s^2).
	 * 
	 * @returns {Number}
	 */
	Ride.prototype.computeAverageAcceleration = function() {
		var accelerationSum = 0.;
		
		for (var i = 1; i < this.coordinatesList.length; i++) {
			var t_1 = this.coordinatesList[i - 1];
			var t = this.coordinatesList[i];

			// aggregate distances
			accelerationSum += t_1.acceleration(t);
		}
		
		return (accelerationSum / (this.coordinatesList.length - 1));
	};
	
	/**
	 * Return the type of ride (based on the average speed)
	 *
	 * @returns {Enum}
	 */
	Ride.prototype.estimateRideType = function() {
		var averageSpeed = this.computeAverageSpeed().toFixed(1);
		var averageAcc = this.computeAverageAcceleration().toFixed(3);
		var maxSpeed = this.computeMaxSpeed().toFixed(1);
		
		// We obviously lost a lot of car movement
		// but that's just a draft
		if(averageSpeed > 30 || maxSpeed > 60 || averageAcc > 0.04) {
			return Ride.RIDE_TYPE.CAR;
		} 
		
		if(averageSpeed <= 5 && maxSpeed < 8) {
			return Ride.RIDE_TYPE.WALK;
		}
		
		return Ride.RIDE_TYPE.UNDEFINED;
	};

	/**
	 * Compute the carbon footprint (kg eq. CO2) of a ride based on the type
	 * and the duration of the given ride.
	 * 
	 * @param ride
	 */
	Ride.prototype.computeCarbonFootprint = function() {
		var distance = this.computeTotalDistance();		
		var nPassengers = 1;
		var type = this.estimateRideType();

		var emission = distance * Ride.EMISSION_FACTOR[type] / nPassengers;
		
		return emission / 1000;
	};
	
	return Ride;

}());

module.exports = Ride;
